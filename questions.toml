[[questions]]
question  = "When was the first known use of the word 'quiz'"
correct_answers   = ["1781"]
answer_choices = ["1771", "1871", "1881"]

[[questions]]
question  = "Which built-in function can get information from the user"
correct_answers   = ["input"]
answer_choices = ["get", "print", "write"]

[[questions]]
question = "What's the purpose of the built-in zip() function"
correct_answers = ["To iterate over two or more sequences at the same time"]
answer_choices = [
 "To combine several strings into one",
 "To compress several files into one archive",
 "To get information from the user",
]

[[questions]]
question  = "What does dict.get(key) return if key isn't found in dict"
correct_answers   = ["None"]
answer_choices = ["key", "True", "False"]

[[questions]]
question = "How do you iterate over both the indices and elements in an iterable"
correct_answers = ["enumerate(iterable)"]
answer_choices = [
 "enumerate(iterable, start=1)",
 "range(iterable)",
 "range(iterable, start=1)",
]

[[questions]]
question  = "What's the official name of the := operator"
correct_answers   = ["Assignment expression"]
answer_choices = ["Named expression", "Walrus operator", "Colon equals operator"]

[[questions]]
question = "What's one effect of calling random.seed(42)"
correct_answers = ["The random numbers are reproducible."]
answer_choices = [
 "The random numbers are more random.",
 "The computer clock is reset.",
 "The first random number is always 42.",
]

[[questions]]
question = "When does __name__ == '__main__' equal True in a Python file"
correct_answers = ["When the file is run as a script"]
answer_choices = [
 "When the file is imported as a module",
 "When the file has a valid name",
 "When the file only has one function",
]

[[questions]]
question  = "Which version of Python is the first with TOML support built in"
correct_answers   = ["3.11"]
answer_choices = ["3.9", "3.10", "3.12"]

[[questions]]
question  = "What's the name of the list-like data structure in TOML"
correct_answers   = ["Array"]
answer_choices = ["List", "Sequence", "Set"]

[[questions]]
question  = "How can you run a Python script named quiz.py"
correct_answers   = ["python quiz.py", "python -m quiz"]
answer_choices = ["python quiz", "python -m quiz.py"]
hint   = "One option uses the filename, and the other uses the module name."

[[questions]]
question = "What's a PEP"
correct_answers = ["A Python Enhancement Proposal"]
answer_choices = [
 "A Pretty Exciting Policy",
 "A Preciously Evolved Python",
 "A Potentially Epic Prize",
]
hint = "PEPs are used to evolve Python."
explanation = """
 Python Enhancement Proposals (PEPs) are design documents that provide
 information to the Python community. PEPs are used to propose new features
 for the Python language, to collect community input on an issue, and to
 document design decisions made about the language.
"""

[[questions]]
question = "How can you add a docstring to a function"
correct_answers = [
 "By writing a string literal as the first statement in the function",
 "By assigning a string to the function's .__doc__ attribute",
]
answer_choices = [
 "By using the built-in @docstring decorator",
 "By returning a string from the function",
]
hint = "They are parsed from your code and stored on the function object."
explanation = """
 Docstrings document functions and other Python objects. A docstring is a
 string literal that occurs as the first statement in a module, function,
 class, or method definition. Such a docstring becomes the .__doc__ special
 attribute of that object. See PEP 257 for more information.

 There is no built-in @docstring decorator. Many functions naturally return
 strings. Such a feature can therefore not be used for docstrings.
"""
